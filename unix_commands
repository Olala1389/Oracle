
mkdir -p xx/yy/zz - creates all these three directories
rmdir - removes empty directories
ls -l - shows the permissions of the file and the total size of the displayed files. 
ls -a - lists all including hidden files
ls -F - places a forward slash (/) after each filename if that file is a directory and and asterisk (*) if it is a text file.
ls -FG - marks by colors and adds / and *.
ls -s - shows size of each file in blocks.
ls -C - lists all files in column format.
ls -m separates the list by commas
rm -i - asks for confirmation before deleting any file in a directory. It's usefull if we do not want to delete all files but only some. 
rm -r * - removes all there is under our HOME directory. 
control l - clear
open -a Preview Name - opens file NAME by using Preview program
* - for all similar objects
finger USER NAME - displays when the user was in the system the last time
echo $0 - shows the current shell
tree -L 2 - displays the tree with only 2 levels down
ctrl b $ - rename the current session in tmux
ctrl b c - create a new window in the current session
exit - exit the current window
ctrl b n -switch between windows in tmux
ctrl b number of the window
ctrl b P - switches to the previous window
ls -l - displays permissions of files and directories
chmod mode file - modifies/sets permissions of files
mkdir -m 777 NAME - when creating a directory we can immidiately set its permission (in this example - mode 777)
777 = (400 + 200 + 100) + (40 + 20 + 10) + (4 + 2 + 1) - means owner drwx+grouprwx+others rwx
:e - when in vim text file - i can switch to another text file
:r - adding text from a different file to the file where i am working now
:f - when in vim, shows file name
Learned commands:
cat |less
cat .bash.profile
vim .bash.profile
ls -a
vim .NAME
vim NAME
ls
gg
G
o
pwd
cd
cd /
alias this='stands for this'
w3m - it's a browser
history - displays history of commands
mkdir NAME
top
cd NAME/NAME/NAME
cd ../.. - relocated me 2 levels up
mv - move a file
rm NAME - remove a text file
rm -R - remove a folder
git - распределенная система управления версиями
tmux att
ctrl b d - detach tmux
ctrl b shift % - vertical split
ctrl b shit ' - horizontal split
ctrl b o - move between windows
ctrl b $ - name the session
tmux kill-session
whereis NAME
command > filename - the output of the command will be written to the file but next time we run > the contents will be overwritten.
command >> filename - the output of the command will be printed in the file in adition to the already available contents. 
ctrl v - enters visual block
ctrl v arrow down - highlights the first letters of the lines we need to change.
ctrl v arrow down shift i shift #  - comment out the lines. 
____________________________________________________________________________
cat > myfirst - creates a file and we can start typing in the terminal. 
ctrl d - stop writing the file.
cat >> myfirst - add some text to the existing file. 
cat file1 file2 file3 >> file4 - copies files 1-3 to file4
_____________________________________________________________________________
cp source target - we can copy files and save file.copy in a different directory
cp -r ./memos ./david.bak - copies memos directory and the files in it to david.bak directory
ls r*2 - gives the list of files starting with r and ending with 2 and any character in between
ls report? - list of files starting with the word report and ending with one additional character (?)
ls report* - list of files starting with the word report and ending with any number of characters (*)
 ____________________________________________________________________________
find .(where to look for the file) -name myfile -mtime +90 - exec rm { } \; - the search starts from my current directory (represented by .) and is continuewd through the hierarchy of the directories. The find command and the -exec (followed by rm command) locate and remove instances of myfile that are 90 days old. 

find . -name myfile -mtime +90 -ok rm { } \; - find and delete all instanes of the myfile but ask for confirmation before deleting any file. 
____________________________________________________________________________
head MEMO - by default head showsthe first 10 lines of the specified file (MEMO in this case) 
head -5 MEMO - first 5 lines
head -5 * the first 5 lines of all files in the current directory
____________________________________________________________________________
tail MEMO - displays the last 10 lines of the specified file.
_____________________________________________________----------------------
paster file1 file2 - joins files together line by line
paster -d : file1 file2 - uses : as the field separator
paster -d " " file1 file2 - uses space as the field separator
_________________________________________________________________________
cut -f 2 Chapeter7/7.5/phones | cat >>  phones1 - cut out the second column in file phones and paste it into a new file phones1

__________________________________________________________________________
paste file1 file2 - combines two files and cats their contents together

shasum -a 256 ./<name of the iso file> - this command generates a hash sum number which is unique. It is used to confirm that the file was not corrupt or tackled with. 
md5 <name of the iso file> - does the same thing
cksum - generates and hashsum for the entered text of file
cksum <enter> <text> <ctrl+d> - displays the hashsum of the entered text
CLI - command line interface
script <file name> - will record everything from the terminal screen to the
file. It's like a printscreen of your session.


.profile - to add shell variables for permanent use.
PS1="Here: "  - if tired of $prompt, you can change it by using Prompt String 1
(PS1) variable

export - to see what variables are already set

VISUAL=vi - the VISUAL variable is used with command editing. If it is set to
vi then shall gives you vi-style editing capabilities on your command line.
This is only in ksh command line editor. 

set -o vi - also turns on the command line editing opetion.
nmcli d - to see the existing interfaces' status (active/unmanaged)
nmcli connection show
nmcli connection up id enp0s3 - to activate the enp0s3 connection

sudo service nginx status - to make sure a certain package is installed and active
rsync -av . olga@192.168.56.5:~/Pictures - this command line adds all files in
the present directory to the remote computer folder Pictures.


Для протоколирования образов компьютерной среды использовать virtualenv
1) create Environments folder
2) in Environments folder type 
virtualenv project1_env - to create the file containing environment data
3) when you need to activate the scripted environment just type 
source project1_env/bin/activate
Then we will see that we are in (project1_env environment.
To see the list of packages in the environment type: pip list

Next step is to freeze all the local dependencies in a single file:
pip freeze --local > requirements.txt
To get out of the virtual environment type in: deactivate
If we create one more environment we can create it with more specific features, f.ex.
virtualenv -p /usr/bin/python2.6 project2_env

next step: pip project2_env/bin/activate
next step: pip list

we can use the dependencies from the previous environment in the new one. To do so, we should: 
pip install -r requirements.txt

to check the available packages now:
pip list

next: deactivate

getent group - to view all groups on your system

usermod -a -G group1, group2, group3 exampleusername - adding user to groups

groups olga - will show what groups user olga belongs to

sudo groupaddd mynewgroup - to add a new group

:w
[A
